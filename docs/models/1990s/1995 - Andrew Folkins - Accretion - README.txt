 This program 'builds' a planetary system (see dole.c or accrete2.c)
 from a dust cloud surrounding a randomly-generated star.  The
 display is similar to that found in Dole's paper, with the planet's
 orbital distance displayed on a logrithmic scale, along with the
 diameter, mass and eccentricity.  In addition, the star's ecosphere is
 also displayed just above the scale. Various parameters of a planet
 are displayed by clicking the left mouse button near the planet's
 position, another system is generated by clicking the right mouse
 button.

 Things to do :
  1.  Well, the user interface is still fairly primitive.  The big
      problem is that it takes 15-20 seconds to generate a system, and
      there's no way to skip that if you don't feel like working
      through 6 straight M dwarfs to finally get something with some
      potential.
  2.  No moons or asteroid belts.
  3.  No binary stars.
  4.  The planetary statistics are still a bit rough, I think I've
      left out a few things like atmospheric content, min/max
      temperatures, etc.
  5.  Planet's orbits are all in the same plane, add inclination and
      all the other orbital parameters.
  6.  No hardcopy output.
  7.  Find a way to speed it up by at least a factor of 5, see 'dole.c'.

 Author : Andrew Folkins

 Address : USENET     : ...!alberta!uqv-mts!rama
           Compuserve : 72060,740
           Real World : Edmonton, AB, Canada

 Date : September 18, 1988

 Computer Stuff : This code was written using the Lattice C 4.0
                  compiler for an Amiga 1000.

 Legal stuff : This code is released into the public domain.
               Permission is granted to fold, bend, spindle and/or
               mutilate this code, just keep the pieces together
               and let me know if you use it for anything.

 dole.c - Planetary accretion algorithm, Icarus V 13 (1978)

 This program implements the accretion algorithm given by Dole.  It's
 major flaw for simulation on a microcomputer is the amount of
 computation which needs to be done.  I've tried to simplify the
 computations a bit, these instances are noted in the code.
 What I'd like to do is use integer arithmetic, but I don't think that's
 possible.

 One thing to try is to limit the injection of nuclei.  For example,
 the average simulation injects about 300 nuclei to produce 8-10
 planets.  Most of these probably end up smashing into an existing
 planet fairly often, so why not try to inject them only into the
 area of dust bands?  As a base line, this is what we have now :

   Run    Time  Nuclei Density   Reach   Swept  Swepti Evolvei
       (seconds)
     1      51     317     910    1085    1322     910    1085
     2      39     243     729     838    1045     729     838
     3      69     494    1142    1457    1843    1142    1457
     4      43     199     943     851    1194     943     851

   Let's try modification #1 - 20 random nuclei then inject into
   the dust bands.

     5      21      40     600     398     614     600     398
     6      19      46     516     393     523     516     393
     7      25      45     713     477     718     713     477
     8      22      45     575     422     590     575     422

   Well, that's ups the speed by over 50%, but we get a lot more
   little planets, so we'll try a second modification.  As the main
   purpose of all those extra nuclei was to vary the eccentricity
   of the available planets, we'll increase the eccentricity of
   the later nuclei.

     9      17      36     447     323     458     447     323
    10      19      33     548     352     555     548     352
    11      15      35     432     293     453     432     293
    12      19      34     502     349     511     502     349

   That's better, though this thing's still too slow by at least a
   factor of 5.  Unfortunately, about half the time is spent in
   density and reach calculations, so the only hope for speeding
   things up now is to make the iteration converge faster.  I'm
   open for ideas on that one.

   One thing we can try is to cut down the number of density calculations
   by using planet->r instead of the middle of the sweep area.  We only
   have to compute the density when the planet is created or when it's
   orbit changes, i.e. MergePlanets().  Modification #3.

   That was interesting, the time was cut to the 12-second range, with
   only 37 nuclei and 65 Density() calls, though Reach() is up around
   400.  All the other iteration counts went up as well.  The system's
   seem a bit off too, this modification can produce extra-large gas
   giants, in the range of 1000 Earth masses.

 Author : Andrew Folkins

 This code is public domain, see the file 'display.c'.

 Modification History :

    April 24/88 - First working version.
    Sept  10/88 - Incorporated into display program.
    Sept  18/88 - Code twiddling to speed things up.

 accrete2.c - Replacement system generation code (use instead of dole.c).

 This code uses a simple Bode-type law, along with the accretion
 formulae from Dole's algorithm, to generate a planetary system.  It
 has the advantage that it's about 10 times faster, but it's output
 is considerably more random.  The planetary nuclei are injected
 in sequence outward from the inner edge of the dust cloud, and far
 apart enough that they shouldn't interact.  When we've reached the
 outer edge, we're finished even though we may not have accreted all
 the available dust.  In fact, we don't even bother to keep track
 of the band structure in dole.c.

 This is quick and dirty, but it doesn't seem overly realistic as
 given, it seems especially difficult to generate Earth-mass
 terrestrial planets.

 Author : Andrew Folkins

 This code is public domain, see the file 'display.c'.